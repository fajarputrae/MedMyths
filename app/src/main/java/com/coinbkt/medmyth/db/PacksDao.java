package com.coinbkt.medmyth.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PACKS".
*/
public class PacksDao extends AbstractDao<Packs, Long> {

    public static final String TABLENAME = "PACKS";

    /**
     * Properties of entity Packs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property IdPack = new Property(1, Integer.class, "idPack", false, "ID_PACK");
        public final static Property PackName = new Property(2, String.class, "packName", false, "PACK_NAME");
        public final static Property PackPoints = new Property(3, Integer.class, "packPoints", false, "PACK_POINTS");
        public final static Property PackImage = new Property(4, Integer.class, "packImage", false, "PACK_IMAGE");
        public final static Property PackStatus = new Property(5, String.class, "packStatus", false, "PACK_STATUS");
    }


    public PacksDao(DaoConfig config) {
        super(config);
    }
    
    public PacksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_PACK\" INTEGER," + // 1: idPack
                "\"PACK_NAME\" TEXT," + // 2: packName
                "\"PACK_POINTS\" INTEGER," + // 3: packPoints
                "\"PACK_IMAGE\" INTEGER," + // 4: packImage
                "\"PACK_STATUS\" TEXT);"); // 5: packStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Packs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idPack = entity.getIdPack();
        if (idPack != null) {
            stmt.bindLong(2, idPack);
        }
 
        String packName = entity.getPackName();
        if (packName != null) {
            stmt.bindString(3, packName);
        }
 
        Integer packPoints = entity.getPackPoints();
        if (packPoints != null) {
            stmt.bindLong(4, packPoints);
        }
 
        Integer packImage = entity.getPackImage();
        if (packImage != null) {
            stmt.bindLong(5, packImage);
        }
 
        String packStatus = entity.getPackStatus();
        if (packStatus != null) {
            stmt.bindString(6, packStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Packs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idPack = entity.getIdPack();
        if (idPack != null) {
            stmt.bindLong(2, idPack);
        }
 
        String packName = entity.getPackName();
        if (packName != null) {
            stmt.bindString(3, packName);
        }
 
        Integer packPoints = entity.getPackPoints();
        if (packPoints != null) {
            stmt.bindLong(4, packPoints);
        }
 
        Integer packImage = entity.getPackImage();
        if (packImage != null) {
            stmt.bindLong(5, packImage);
        }
 
        String packStatus = entity.getPackStatus();
        if (packStatus != null) {
            stmt.bindString(6, packStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Packs readEntity(Cursor cursor, int offset) {
        Packs entity = new Packs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idPack
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // packPoints
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // packImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // packStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Packs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPack(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPackName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPackPoints(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPackImage(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPackStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Packs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Packs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Packs entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
